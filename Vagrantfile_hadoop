# -*- mode: ruby -*-
# vi: set ft=ruby :

$node_script = <<SCRIPT
#!/bin/bash

#Disable selinux:
sed -i 's/^\(SELINUX\s*=\s*\).*$/\1disabled/' /etc/selinux/config

#Setup NTP:
yum -y install ntp
chkconfig ntpd on
service ntpd start
sudo hwclock --systohc

#Disable Firawall:
chkconfig iptables off
SCRIPT

$manager_script = <<SCRIPT
#!/bin/bash

wget -O /etc/yum.repos.d/cloudera-manager.repo http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo 
yum -y update

yum -y install oracle-j2sdk1.7 cloudera-manager-server-db cloudera-manager-server cloudera-manager-daemons

service cloudera-scm-server-db initdb
service cloudera-scm-server-db start
service cloudera-scm-server start

SCRIPT

$hosts_script = <<SCRIPT
cat > /etc/hosts <<EOF
127.0.0.1       localhost
EOF
SCRIPT


## Delete by DandyDev
$master_script = <<SCRIPT
#!/bin/bash

yum install curl -y

REPOCM=${REPOCM:-cm5}
CM_REPO_HOST=${CM_REPO_HOST:-archive.cloudera.com}
CM_MAJOR_VERSION=$(echo $REPOCM | sed -e 's/cm\\([0-9]\\).*/\\1/')
CM_VERSION=$(echo $REPOCM | sed -e 's/cm\\([0-9][0-9]*\\)/\\1/')
OS_CODENAME=$(lsb_release -sc)
OS_DISTID=$(lsb_release -si | tr '[A-Z]' '[a-z]')

if [ $CM_MAJOR_VERSION -ge 4 ]; then
  cat > /etc/apt/sources.list.d/cloudera-$REPOCM.list <<EOF
deb [arch=amd64] http://$CM_REPO_HOST/cm$CM_MAJOR_VERSION/$OS_DISTID/$OS_CODENAME/amd64/cm $OS_CODENAME-$REPOCM contrib
deb-src http://$CM_REPO_HOST/cm$CM_MAJOR_VERSION/$OS_DISTID/$OS_CODENAME/amd64/cm $OS_CODENAME-$REPOCM contrib
EOF
curl -s http://$CM_REPO_HOST/cm$CM_MAJOR_VERSION/$OS_DISTID/$OS_CODENAME/amd64/cm/archive.key > key
apt-key add key
rm key
fi

yum update

export DEBIAN_FRONTEND=noninteractive

yum -y install oracle-j2sdk1.7 cloudera-manager-server-db cloudera-manager-server cloudera-manager-daemons

service cloudera-scm-server-db initdb
service cloudera-scm-server-db start
service cloudera-scm-server start
SCRIPT
## Delete by DandyDev


Vagrant.configure("2") do |config|

    # Define base image
    config.vm.box = "centos/7"
    
    # Manage /etc/hosts on host and VMs
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = false
    config.hostmanager.include_offline = true
    config.hostmanager.ignore_private_ip = false

    # Share an additional folder to the guest VM. The first argument is the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third argument is a set of non-required options.        
    config.vm.synced_folder ".", "/vagrant", type: "rsync", 
        rsync__auto: true, 
        rsync__exclude: ".git/"
    
    # Provider-specific configuration so you can fine-tune various backing providers for Vagrant. These expose provider-specific options.   
    config.vm.provider "virtualbox" do |vb|
        # Synchronize clocks each time when desync becomes > 1s (1000ms) between host and guest.
        vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 1000 ]      
    end


    ## CONFIG HADOOP CLUSTER
    ##***************************************
    # Total Hadoop nodes
    numNodes = 3
    r = 1..numNodes
    (r.first).upto(r.last).each do |i|
        # Hadoop Nodes configurations.
        config.vm.define "hadoop-node#{i}" do |node|
            node.vm.network "private_network", ip: "192.168.50.#{i+10}"
            
            node.vm.provider :virtualbox do |v|
                v.customize ["modifyvm", :id, "--cpus", 1]
            end
           
            if i == r.first
                node.vm.hostname = "vm-cluster-hadoop-master"
                node.vm.provider :virtualbox do |v|
                    v.name ="hadoop-master"
                    v.customize ["modifyvm", :id, "--memory", 2048]                    
                end

                ## Hadoop Cluster Ports mapping:
                node.vm.network "forwarded_port", guest: 50070, host: 50070, host_ip: "127.0.0.1"

                 ## Cloudera Manager web console Ports mapping:
                node.vm.network "forwarded_port", guest: 7180, host: 7180, host_ip: "127.0.0.1"

            else
                node.vm.hostname = "vm-cluster-hadoop-slave#{i}"
                node.vm.provider :virtualbox do |v|
                    v.name = "hadoop-slave#{i}"
                    v.customize ["modifyvm", :id, "--memory", 1024]                    
                end

            end

            node.vm.provision :shell, :inline => $node_script
            node.vm.provision :shell, :inline => $hosts_script
            node.vm.provision :hostmanager            

            if i == r.first
                node.vm.provision :shell, :inline => $manager_script
                #node.vm.provision :ansible do |ansible|
                #  ansible.inventory_path = "hosts-cluster.yml"
                #  ansible.verbose = "v"
                #  ansible.sudo = true
                #  ansible.playbook = "site.yml"
                #  ansible.limit = 'hadoop_all'
                #end  
            end
        end
    end


    ## CONFIG NIFI ENV
    ##***************************************  
    config.vm.define "nifi_env" do |nifi_env|
        nifi_env.vm.hostname = "vm-nifi-env"
        nifi_env.vm.network :private_network, ip: "192.168.50.30"
        nifi_env.vm.provider :virtualbox do |v|
            v.name = "nifi-env"
            v.customize ["modifyvm", :id, "--memory", 4096]
            v.customize ["modifyvm", :id, "--cpus", 1]
        end
        
        nifi_env.vm.provision :shell, :inline => $hosts_script
        nifi_env.vm.provision :hostmanager


        # Create a forwarded port mapping which allows access to a specific port within the machine from a port on the host
        # machine and only allow access via 127.0.0.1 to disable public access
        #         
        # KafkaÂ´s Ports mapping:
        nifi_env.vm.network "forwarded_port", guest: 3030, host: 3030, host_ip: "127.0.0.1"
        nifi_env.vm.network "forwarded_port", guest: 2181, host: 2181, host_ip: "127.0.0.1"
        nifi_env.vm.network "forwarded_port", guest: 9092, host: 9092, host_ip: "127.0.0.1"

        ## Kafka Manager Ports mapping:
        nifi_env.vm.network "forwarded_port", guest: 9000, host: 9000, host_ip: "127.0.0.1"

        ## Docker Ports mapping:
        nifi_env.vm.network "forwarded_port", guest: 2375, host: 2375, host_ip: "127.0.0.1"

        ## Apache NiFi Ports mapping:
        nifi_env.vm.network "forwarded_port", guest: 8080, host: 8080, host_ip: "127.0.0.1"

        ## ELK stack (Elasticsearch e Kibana) Ports mapping:
        nifi_env.vm.network "forwarded_port", guest: 9200, host: 9200, host_ip: "127.0.0.1"
        nifi_env.vm.network "forwarded_port", guest: 9300, host: 9300, host_ip: "127.0.0.1"
        nifi_env.vm.network "forwarded_port", guest: 5601, host: 5601, host_ip: "127.0.0.1"


        # Enable provisioning with a shell script and Ansible playbook.
        #
        # Softwares instalation: JDK8, Docker, Hadoop Cluster. 
        #nifi_env.vm.provision "ansible" do |ansible|
        #    ansible.playbook = "environment/provisioning/ansible/nifi-env-playbook.yml"
        #    ansible.verbose = "v"
        #end
    end


#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
### 2a OPCAO
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    # Hadoop Master VM configuration
    config.vm.define "hadoop_master" do |hadoop_master|
        hadoop_master.vm.hostname = "vm-cluster-hadoop-master"
        hadoop_master.vm.network "private_network", ip: "192.168.50.11"

        hadoop_master.customize ["modifyvm", :id, "--memory", 1024]
        hadoop_master.customize ["modifyvm", :id, "--cpus", 1]
                        
        hadoop_master.vm.provision :shell, :inline => $hosts_script
        hadoop_master.vm.provision :hostmanager
    end

    # Hadoop Slave1 VM configuration
    config.vm.define "hadoop_slave1" do |hadoop_slave1|
        hadoop_slave1.vm.hostname = "vm-cluster-hadoop-slave1"
        hadoop_slave1.vm.network "private_network", ip: "192.168.50.11"

        hadoop_slave1.customize ["modifyvm", :id, "--memory", 1024]
        hadoop_slave1.customize ["modifyvm", :id, "--cpus", 1]
                        
        hadoop_slave1.vm.provision :shell, :inline => $hosts_script
        hadoop_slave1.vm.provision :hostmanager
    end
    
    # Hadoop Slave2 VM configuration
    config.vm.define "hadoop_slave2" do |hadoop_slave2|
        hadoop_slave2.vm.hostname = "vm-cluster-hadoop-slave2"
        hadoop_slave2.vm.network "private_network", ip: "192.168.50.12"
        
        hadoop_slave2.customize ["modifyvm", :id, "--memory", 1024]
        hadoop_slave2.customize ["modifyvm", :id, "--cpus", 1]
                    
        hadoop_slave2.vm.provision :shell, :inline => $hosts_script
        hadoop_slave2.vm.provision :hostmanager

        #hadoop_slave2.vm.provision :ansible do |ansible|
        #  ansible.inventory_path = "hosts-cluster.yml"
        #  ansible.verbose = "v"
        #  ansible.sudo = true
        #  ansible.playbook = "site.yml"
        #  ansible.limit = 'hadoop_all'
        #end
    end
      
end