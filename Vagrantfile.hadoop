# -*- mode: ruby -*-
# vi: set ft=ruby :

$node_script = <<SCRIPT
#!/bin/bash

#Disable selinux:
sed -i 's/^\(SELINUX\s*=\s*\).*$/\1disabled/' /etc/selinux/config

#Setup NTP:
yum -y install ntp
chkconfig ntpd on
service ntpd start
sudo hwclock --systohc

#Disable Firawall:
service iptables save
service iptables stop
chkconfig iptables off
SCRIPT

$manager_script = <<SCRIPT
#!/bin/bash

wget -O /etc/yum.repos.d/cloudera-manager.repo http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo 
yum -y update

yum -y install oracle-j2sdk1.7 cloudera-manager-server-db cloudera-manager-server cloudera-manager-daemons

service cloudera-scm-server-db initdb
service cloudera-scm-server-db start
service cloudera-scm-server start

SCRIPT

$hosts_script = <<SCRIPT
#!/bin/bash

cat > /etc/hosts <<EOF
127.0.0.1       localhost
EOF
SCRIPT

Vagrant.configure("2") do |config|
    
    # Define base image
    config.vm.box = "centos/7"
    
    # Manage /etc/hosts on host and VMs
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = false
    config.hostmanager.include_offline = true
    config.hostmanager.ignore_private_ip = false

    # Share an additional folder to the guest VM. The first argument is the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third argument is a set of non-required options.        
    config.vm.synced_folder ".", "/vagrant", type: "rsync", 
        rsync__auto: true, 
        rsync__exclude: ".git/"
    
    # Provider-specific configuration so you can fine-tune various backing providers for Vagrant. These expose provider-specific options.   
    config.vm.provider "virtualbox" do |vb|
        # Synchronize clocks each time when desync becomes > 1s (1000ms) between host and guest.
        vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 1000 ]      
    end
      

    # Hadoop Master VM configuration
    config.vm.define "hadoop_master" do |hadoop_master|
        hadoop_master.vm.hostname = "vm-cluster-hadoop-master"
        hadoop_master.vm.network "private_network", ip: "192.168.50.11"

        hadoop_master.customize ["modifyvm", :id, "--memory", 1024]
        hadoop_master.customize ["modifyvm", :id, "--cpus", 1]
                        
        hadoop_master.vm.provision :shell, :inline => $hosts_script
        hadoop_master.vm.provision :hostmanager
    end

    # Hadoop Slave1 VM configuration
    config.vm.define "hadoop_slave1" do |hadoop_slave1|
        hadoop_slave1.vm.hostname = "vm-cluster-hadoop-slave1"
        hadoop_slave1.vm.network "private_network", ip: "192.168.50.11"

        hadoop_slave1.customize ["modifyvm", :id, "--memory", 1024]
        hadoop_slave1.customize ["modifyvm", :id, "--cpus", 1]
                        
        hadoop_slave1.vm.provision :shell, :inline => $hosts_script
        hadoop_slave1.vm.provision :hostmanager
    end
    
    # Hadoop Slave2 VM configuration
    config.vm.define "hadoop_slave2" do |hadoop_slave2|
        hadoop_slave2.vm.hostname = "vm-cluster-hadoop-slave2"
        hadoop_slave2.vm.network "private_network", ip: "192.168.50.12"
        
        hadoop_slave2.customize ["modifyvm", :id, "--memory", 1024]
        hadoop_slave2.customize ["modifyvm", :id, "--cpus", 1]
                    
        hadoop_slave2.vm.provision :shell, :inline => $hosts_script
        hadoop_slave2.vm.provision :hostmanager

        #hadoop_slave2.vm.provision :ansible do |ansible|
        #  ansible.inventory_path = "hosts-cluster.yml"
        #  ansible.verbose = "v"
        #  ansible.sudo = true
        #  ansible.playbook = "site.yml"
        #  ansible.limit = 'hadoop_all'
        #end
    end    
    
  end
